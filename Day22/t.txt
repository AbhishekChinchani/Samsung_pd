<details>

 <summary>Clock tree synthesis</summary>

 - Clock Tree Synthesis involves the generation of a clock distribution network that ensures a stable and synchronized clock signal throughout the entire chip or circuit.
 - CTS is performed for several importnant reasons :
   
   1.Synchronization: In digital circuits, synchronous operations are critical. A clock signal is used to coordinate the activities of various elements within the circuit, ensuring they work together harmoniously. CTS is done to 	 
     distribute this clock signal uniformly to all parts of the chip so that all operations occur in sync.

   2.Minimizing Clock Skew: Clock skew refers to the variation in arrival times of the clock signal at different parts of the chip. Excessive clock skew can lead to timing violations and impact the overall performance and reliability 
     of the circuit. CTS is employed to minimize clock skew, ensuring that the clock signal arrives at all elements at nearly the same time.

   3.Timing Closure: Achieving timing closure is a crucial objective in chip design. CTS helps in meeting timing constraints by distributing the clock signal efficiently. When the clock signal reaches all elements simultaneously, it 
     becomes easier to manage and control the timing of the circuit.

   4.Power Efficiency: CTS can be used to design a power-efficient clock distribution network. By strategically placing buffers and repeaters and optimizing clock tree topology, designers can minimize power consumption in the clock 
    distribution network, which is especially important in portable and battery-powered devices.

- Various Algorithms used for CTS

   1. H-Tree

   ![image](https://github.com/AbhishekChinchani/Samsung_pd/assets/142480501/aeaeffdc-8156-47e5-a3a2-5836ae5ee712)

  Steps:

  - Find out all the flops present
  - Find out the center of all the flops
  - Trace clock port ot the center point
  - Divide the core into two parts, trace both the parts and reach to each center
  - From the center, again, divide the area into two and again trace till center at both the end
  - Repeat this algo till the time we reach the flop clock pin
 
2. **Clockwise multi-source clock tree synthesis (CTS) algorithm** : It is a specific approach to designing and optimizing the clock distribution network in digital integrated circuits. In this algorithm, multiple clock sources are considered, and the clock tree is designed to distribute clock signals from these sources in a clockwise direction.
 
   ![image](https://github.com/AbhishekChinchani/Samsung_pd/assets/142480501/1ad68f9f-0d5e-47f4-851c-e5cae80dfc7a)

  Steps:

  - Identify and specify the multiple clock sources in the design. These sources may be associated with different clock domains or regions of the chip.
  - Create a clock tree topology that outlines the placement of buffers and repeaters, the routing of clock lines, and the interconnection of clock network elements. In a multi-source CTS, the tree should be designed to distribute 	 
    clock signals from all selected sources.
  - Determine the type and sizes of buffers to be used in the clock tree. Sizing is crucial for optimizing power consumption, signal integrity, and clock skew. Consider the characteristics of each clock source when sizing buffers.
  - Physically lay out the clock distribution network, including the placement of buffers and the routing of clock lines. Ensure that the routing accommodates the distribution of clock signals from multiple sources in a clockwise 
    manner
  - Implement clock gating cells as needed to selectively enable or disable clock signals to specific circuit portions when they are not in use. Ensure that clock signals are synchronized as they traverse the clock tree.
  - Ensure that the clock tree meets timing constraints, such as setup and hold times, for all flip-flops and other clocked elements in the design. Adjust buffer sizes and placement as necessary to achieve timing closure.
  - After synthesizing the clock tree, perform thorough verification, including simulations and static timing analysis, to ensure that the design requirements are met and that clock signals are properly distributed from all sources.
  - t's common to go through several iterations of clock tree synthesis to achieve the desired performance, power efficiency, and timing closure. Fine-tune the clock tree as necessary based on the results of analysis and simulation.


**Various CTS checks**

- Skew check
- Latency check
- Pulse width check
- Duty cycle check
- Power check
- Crosstalk Quality check
- Delta Delay Quality check
- Glitch Quality check





 








      


</details>

<details>

 <summary>Labs</summary>

 - In ICC2 Compiler we give the command *check_clock_tree* , This command checks the clock trees of current design for posiible problems with netlist, timing constraints, or other tool configurations that can adversely impact clock tree synthesis.This is used to check for common problems that might impact CTS

 <img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/37d2085ca9d207a3e1c606f0a942a786ffca396a/Day22/check_clock_tree.png">
 
 <img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/37d2085ca9d207a3e1c606f0a942a786ffca396a/Day22/check_clock_tree2.png">

 When we man *CTS-904*

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/37d2085ca9d207a3e1c606f0a942a786ffca396a/Day22/man_CTS-904_10.png">

 In this we can see that there is 1 warning which states that there are some clock cells that does not have LEQ cells for resizing. LEQ cells  are level Equivalence cells which are used to create logic gates or elements that have equivalent feature of different complexity. As a result the sizes of the cells can be easily resized by using a cell of differnt complexity.

 CTS-015 : It is a warning which comes up when we set_max_delay  or  set_min_delay  constraints are defined in the clock network.

 CTS-918 : It is a warning which comes up when Volatage  area  are  blocked for buffering through app option. It can be removed by resetting the  value  of  app  option  "opt.com-
       mon.blocked_vas" to empty string.

In our case we got only one warning that was of *CTS 904*.



- The next command is *check_legality* , This command checks the legality of the curreent_placement and output a report of violation statistics.

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/37d2085ca9d207a3e1c606f0a942a786ffca396a/Day22/Checklocality_3.png">

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/37d2085ca9d207a3e1c606f0a942a786ffca396a/Day22/Checklocality_4.png">

- Next In top.tcl we can see that there is a command called *clock_opt* , this is used to to perform clock tree synthesis and it optimizes the clock trees.

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/add_now.png">

 **Reports**

- report_clock_timing -type summary
  	  
<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/timing_summary_1.png">

- report_clock_timing -type skew

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/skew_5.png">

**Explaination**

- These repoprts specify a skew report ,For skew reports, each report entry  is a  pair  of  sink  pins and their relative skew.
- Skews reported by report_clock_timing are local skews only.  Local skew exists from one sink pin to another only if their associated sequential devices are connected via a data path in the appropriate     from-to sense.

		
- report_clock_timing -type latency

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/latency_6.png">

**Explaination**

- Specify a latency report of those  clock  paths that reach right trigger edge at endpoint.
  	
- report_clock_timing -type transition

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/transition_7.png">

When we give *report_clock_settings* it gves all the clock settings , configurtaions , spacing rules, route rules , max load cap on buffers and inverters.

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/report_clock_settings_11.png">

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/report_clock_settings_12.png">

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/report_clock_settings_13.png">

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/3e1455da6f8b58502410662dbb7e9d2fb5242aa4/Day22/report_clock_settings_14.png">

# Day-23 Clock Gating techniques

<details>

 <summary>Theory</summary>

 **Clock Tree Synthesis (Advanced H-Tree)**

 - A digital circuit having lot of clocks, so if designing a clock tree will be huge with many buffers etc
 - So the whole chip will section into smaller versions and then each section will have its own clock tree, and then finally a complete routed tree.

 ![image](https://github.com/AbhishekChinchani/Samsung_pd/assets/142480501/55b30390-571b-440c-8641-68055a254f4d)


**Clock Gating**

 

 ![image](https://github.com/AbhishekChinchani/Samsung_pd/assets/142480501/6bdd8cce-dfeb-4b3e-a93a-7d4140572184)


   
 - Beside area and timing, there is another important factor which is power -> Need power “aware” CTS
 - Clock gating is one of the techniques used to save the dynamic power of clock elements in the design
 - The principle behind clock gating is to stop the clock of those sequential elements whose data is not toggling
 - Clock gating technique using AND, OR Universal NAND gate
 - It has been found that 50% of the dynamic power originates from clock-related circuits
 - Clock gating is inserted during synthesis stage and optimized in the implementation stage (Physical Design stage)
 - Example scenario why required clock gating: If there is a block only need clock signal for 10 mins but the clock signal is running 1hr, so a lot of power is dissipating (due to switching activity), so we need clock gating which act 
   as switch.
 - Clock gating is a common technique used in Very Large Scale Integration (VLSI) design to reduce power consumption in digital circuits, particularly in synchronous systems. It involves selectively enabling or disabling the clock 
   signal to specific parts of the circuit, depending on the operational requirements, which can help save power when certain components of the circuit are not actively performing any useful work.

**Routing**

- The last step of physical design flow
- Making physical connections between signal pins using metal layers
- There is mainly 3 types of routing:

  	- P/G routing
  	- Clock routing
  	- Signal routing
  	  	- Global routing
  	  	- Detailed routing


- The command which performs the above routing is *route_opt*
</details>

<details>

 <summary>Labs</summary>
 
 - Three types of routing: P/G routing, Clock routing and Signal routing

	P/G routing:

  	This we can see in pns_example.tcl as shown in the below figure

 <img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/31b137e4bee427cca24cd607ca9e45ceae265ec5/day23/pns_2.png">
    

**Clock Routing and signal routing**:

- place_opt: Place and optimize the current design
- clock_opt: Synthesize and route the clocks in the current design and then further optimize the design based on the propagated clock latencies
- route_auto: runs global routing, track assignment and detail routing in one step

top.tcl

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/31b137e4bee427cca24cd607ca9e45ceae265ec5/day23/top.tcl_1.png">

 - We need to add 3 lines between place_opt and clock_opt , to insert the clock buffers in the design.

 ```ruby
  
 set_lib_cell_purpose -include cts {sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_*}
 synthesize_clock_tree
 set_propagated_clock \[all_clocks]
 ```

   <img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/8124a19f0bda887ab38c003fa9d3f45d8e50315b/day23/adding_in_top.tcl.png">

  -  *set_lib_cell_purpose -include cts {sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_*}* command specifies that the library cells in the  tech_lib library(sky130_fd_sc_hd__tt_025C_1v80)  whose names start with "buf" should be used for clock tree synthesis.
  -  *synthesize_clock_tree*  command synthesizes clock trees and updates  the  design  database with  the  compiled  clock  trees. The compilation of the clock tree is skew driven.  Optionally, this command can optimize compiled clock tree for slack metric.
  -  *set_propagated_clock \[all_clocks]* command Specifies that delays be propagated through the clock network to determine latency at register clock pins.Propagated  clock latency is used for post-layout, after final clock tree generation. If  the  set_propagated_clock  command  is applied to pins or ports, it affects all register clock pins in the transitive fanout of the pins or ports. *The above command specifies to use propagated clock latency for all clocks only in the current mode in the design* .
   
 - Before this we need to change the input voltage to 1.80V as we know that our tech file supports 1.8V , but the default used in this case was 1.1V.

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/8124a19f0bda887ab38c003fa9d3f45d8e50315b/day23/change_voltage_1.8_3.png">

 - Then when we source this file we can see buffers in the design

 - The schematic is as follows

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/4be7c65805345bf2f7d416a88729b23b7e89e99f/day23/schematic.png">
<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/1a095f3223c553e87e06fd6f3f20156afab346b9/day23/The_buffers_in_gui.png">

  Here we can see that the buffers are added in the design
   

 - We can see that slack is reduced from -1.90 to -0.13

    Before
   
<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/8124a19f0bda887ab38c003fa9d3f45d8e50315b/day23/viol_after_mod_16.png">

   After

<img  width="1085" alt="hand_writ_exam" src="https://github.com/AbhishekChinchani/Samsung_pd/blob/8124a19f0bda887ab38c003fa9d3f45d8e50315b/day23/slack_is_comparitively_reduced.png">

The clock buffers and ICG inserted in the circuit are as follows

```ruby

Buffer/Inverter reference list for clock tree synthesis:
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_12
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_16
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_4
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_6
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__buf_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__bufbuf_16
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__bufbuf_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkbuf_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkbuf_16
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkbuf_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkbuf_4
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkbuf_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkdlybuf4s15_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkdlybuf4s15_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkdlybuf4s18_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkdlybuf4s18_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkdlybuf4s25_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkdlybuf4s25_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkdlybuf4s50_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkdlybuf4s50_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlygate4sd1_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlygate4sd2_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlygate4sd3_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlymetal6s2s_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlymetal6s4s_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlymetal6s6s_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__probe_p_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__probec_p_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkbufkapwr_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkbufkapwr_16
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkbufkapwr_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkbufkapwr_4
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkbufkapwr_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__bufinv_16
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__bufinv_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkinv_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkinv_16
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkinv_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkinv_4
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkinv_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkinvlp_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__clkinvlp_4
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__inv_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__inv_12
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__inv_16
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__inv_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__inv_4
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__inv_6
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__inv_8
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkinvkapwr_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkinvkapwr_16
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkinvkapwr_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkinvkapwr_4
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__lpflow_clkinvkapwr_8

ICG reference list:
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlclkp_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlclkp_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__dlclkp_4
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__sdlclkp_1
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__sdlclkp_2
   sky130_fd_sc_hd__tt_025C_1v80/sky130_fd_sc_hd__sdlclkp_4
```
		
</details>

